from os.path import join
import sys
import pandas as pd
import json
from collections import defaultdict


INPUT_DIR = config["input_path"]
INDEX = config['salmon_index']
OUTPUT_DIR = config["output_path"]
SALMON_PATH = config["salmon"].format(sys.platform)
NUM_THREADS = str(config["num_threads"])
SAMPLES_FQ = glob_wildcards(join(INPUT_DIR, "{sample}_R1.fastq")).sample
SAMPLES_GZ = glob_wildcards(join(INPUT_DIR, "{sample}_R1.fastq.gz")).sample
EXPR_TYPE = config["exprtype"]
SAMPLE_FOLDER = OUTPUT_DIR + '/{sample_fq}'
QUANT_FILE = SAMPLE_FOLDER + '/quant.sf'
GZ_SAMPLE_FOLDER = OUTPUT_DIR + '/{sample_gz}'
GZ_QUANT_FILE = GZ_SAMPLE_FOLDER + '/quant.sf'
EXPR_TABLE = OUTPUT_DIR + "/EXPR.csv"
MAPPING_INFO = OUTPUT_DIR + "/MAPPING_INFO.csv"


rule all:
    input:
        EXPR_TABLE, MAPPING_INFO

rule run_salmon_fq:
    input:
        idx = INDEX,
        r1 = join(INPUT_DIR, "{sample_fq}_R1.fastq"),
        r2 = join(INPUT_DIR, "{sample_fq}_R2.fastq")
    params:
        outdir = SAMPLE_FOLDER
    output:
        QUANT_FILE
        
    shell:
        SALMON_PATH + " quant -q -i {input.idx} -l A -1 {input.r1} -2 {input.r2} -o {params.outdir} --writeMappings=- -p " +\
            NUM_THREADS + \
            " |samtools view -b -@ " + NUM_THREADS + " > {params.outdir}/aligned.bam "


rule run_salmon_gz:
    input:
        idx = INDEX,
        r1 = join(INPUT_DIR, "{sample_gz}_R1.fastq.gz"),
        r2 = join(INPUT_DIR, "{sample_gz}_R2.fastq.gz")
    params:
        outdir = GZ_SAMPLE_FOLDER
        
    output:
        GZ_QUANT_FILE

    shell:
        SALMON_PATH + " quant -q -i {input.idx} -l A -1 {input.r1} -2 {input.r2} -o {params.outdir} --writeMappings=- -p " + \
            NUM_THREADS + \
            " |samtools view -b -@ " + NUM_THREADS + " > {params.outdir}/aligned.bam "



rule collect_abundance:
    input:
        expand(QUANT_FILE, sample_fq = SAMPLES_FQ) +
        expand(GZ_QUANT_FILE, sample_gz = SAMPLES_GZ) 

    output:
        EXPR_TABLE

    run:
        def get_abundance(fname):
            abundance = defaultdict( float )
            with open(fname, "r") as inp:
                line = inp.readline()
                for line in inp:
                    line = line.strip().split()
                    name = line[0]
                    abundance[name] += float(line[3]) if EXPR_TYPE is "TPM" else float(line[-1])

            return abundance

        tb = dict()
        for file in input:
            sid = file.split("/")[-2]
            tb[sid] = get_abundance(file) 

        with open(str(output), "w") as oup:
            oup.write(pd.DataFrame(tb).to_csv(sep=",", index_label="TE"))


rule collect_mappability:
    input:
        expand(join(OUTPUT_DIR,"{sample_fq}"), sample_fq = SAMPLES_FQ) +
        expand(join(OUTPUT_DIR,"{sample_gz}"), sample_gz = SAMPLES_GZ) 
    output:
        MAPPING_INFO
    run:
        def get_mappability(fname):
            with open(fname, "r") as inp:
                data = json.load(inp)
            sid = file.split("/")[-3]
            return { 
                "SampleID" : sid, 
                "num_mapped": data["num_mapped"], 
                "num_processed" : data["num_processed"], 
                "percent_mapped": data["percent_mapped"] }
        tb = []
        for file in input:
            file = join(file, "aux_info/meta_info.json")
            tb.append(get_mappability(file))

        with open(str(output), "w") as oup:
            oup.write(pd.DataFrame(tb).set_index("SampleID").to_csv(sep=",", index_label="SampleID"))
